services:
#  accountsdb:
#    image: postgres:17.4
#    environment:
#      POSTGRES_USER: postgress
#      POSTGRES_PASSWORD: postgress
#      POSTGRES_DB: accounts
#    ports:
#      - "5432:5432"
#    volumes:
#      - accounts_db:/var/lib/postgresql/data
#    networks:
#      - sv
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U postgress -d accounts" ]
#      interval: 10s   # Check every 10 seconds
#      timeout: 5s     # Timeout if no response in 5 seconds
#      retries: 5      # Retry up to 5 times before marking as unhealthy
#      start_period: 10s # Wait 10s before the first check
#
#  loansdb:
#    image: postgres:17.4
#    environment:
#      POSTGRES_USER: postgress
#      POSTGRES_PASSWORD: postgress
#      POSTGRES_DB: loans
#    ports:
#      - "5434:5432"
#    volumes:
#      - loans_db:/var/lib/postgresql/data
#    networks:
#      - sv
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U postgress -d loans" ]
#      interval: 10s   # Check every 10 seconds
#      timeout: 5s     # Timeout if no response in 5 seconds
#      retries: 5      # Retry up to 5 times before marking as unhealthy
#      start_period: 10s # Wait 10s before the first check
#
#  cardsdb:
#    image: postgres:17.4
#    environment:
#      POSTGRES_USER: postgress
#      POSTGRES_PASSWORD: postgress
#      POSTGRES_DB: cards
#    ports:
#      - "5433:5432"
#    volumes:
#      - cards_db:/var/lib/postgresql/data
#    networks:
#      - sv
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U postgress -d cards" ]
#      interval: 10s   # Check every 10 seconds
#      timeout: 5s     # Timeout if no response in 5 seconds
#      retries: 5      # Retry up to 5 times before marking as unhealthy
#      start_period: 10s # Wait 10s before the first check

#  rabbit:
#    image: rabbitmq:3.13-management
#    hostname: rabbitmq
#    ports:
#      - "5672:5672"
#      - "15672:15672"
#    healthcheck:
#      test: rabbitmq-diagnostics check_port_connectivity
#      interval: 10s
#      timeout: 5s
#      retries: 10
#      start_period: 5s
#    networks:
#      - sv

  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      sv:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../observability/alloy/alloy-local-config.yml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - sv

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - sv

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sv

  backend:
    image: grafana/loki:latest
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - sv

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sv

  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    networks:
      - sv

  configserver:
    image: "sparshverma/configserver:v4"
    container_name: configserver-ms-v4
    ports:
      - "8071:8071"
#    depends_on:
#      rabbit:
#        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_PROFILES_ACTIVE: native
    networks:
      - sv

  eurekaserver:
    image: "sparshverma/eurekaserver:v4"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_PROFILES_ACTIVE: default
      SPRING_APPLICATION_NAME: "eurekaserver"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
    networks:
      - sv

  accounts:
    image: "sparshverma/accounts:v5"
    container_name: accounts-ms-v3
    depends_on:
#      accountsdb:
#        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "8080:8080"
    networks:
      - sv
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
      SPRING_PROFILES_ACTIVE: default
      SPRING_RABBITMQ_HOST: "rabbit"
#      SPRING_DATASOURCE_URL: "jdbc:postgresql://accountsdb:5432/accounts"
#      SPRING_DATASOURCE_USERNAME: "postgress"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/

  cards:
    image: "sparshverma/cards:v5"
    container_name: cards-ms-v3
    depends_on:
#      cardsdb:
#        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:9001/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "9001:9001"
    networks:
      - sv
    environment:
      SPRING_APPLICATION_NAME: "cards"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
      SPRING_PROFILES_ACTIVE: default
      SPRING_RABBITMQ_HOST: "rabbit"
#      SPRING_DATASOURCE_URL: "jdbc:postgresql://cardsdb:5432/cards"
#      SPRING_DATASOURCE_USERNAME: "postgress"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/

  loans:
    image: "sparshverma/loans:v5"
    container_name: loans-ms-v3
    depends_on:
#      loansdb:
#        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "8090:8090"
    networks:
      - sv
    environment:
      SPRING_APPLICATION_NAME: "loans"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
      SPRING_PROFILES_ACTIVE: default
      SPRING_RABBITMQ_HOST: "rabbit"
#      SPRING_DATASOURCE_URL: "jdbc:postgresql://loansdb:5432/loans"
#      SPRING_DATASOURCE_USERNAME: "postgress"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/

  gatewayserver:
    image: "sparshverma/gatewayserver:v2"
    container_name: gatewayserver-v1
    depends_on:
      accounts:
        condition: service_healthy
      loans:
        condition: service_healthy
      cards:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8072:8072"
    networks:
      - sv
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
      SPRING_PROFILES_ACTIVE: default
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s

networks:
  sv:
    driver: "bridge"

volumes:
  accounts_db:
  loans_db:
  cards_db:
